For ft_strlcpy, in /Users/mergarci/francinette/tests/libft/fsoares/test_strlcpy.c:

Error in test 1: ft_strlcpy(dest, "aaa", 0): expected: 3, yours: 0
Error in test 2: ft_strlcpy(dest, "aaa", 2): expected: 3, yours: 1
Error in test 3: ft_strlcpy(dest, "aaa", 3): expected: 3, yours: 2

For ft_strlcat, in /Users/mergarci/francinette/tests/libft/fsoares/test_strlcat.c:

Error in test 1: ft_strlcat("pqrstuvwxyz", "abcd", 0): expected: 4, yours: 11
Error in test 2: ft_strlcat("pqrstuvwxyz", "abcd", 1): expected: 5, yours: 12
Error in test 3: ft_strlcat("pqrstuvwxyz", "abcd", 2): expected: 6, yours: 13
Error in test 4: ft_strlcat("pqrstuvwxyz", "abcd", 3): expected: 7, yours: 14
Error in test 5: ft_strlcat("pqrstuvwxyz", "abcd", 4): expected: 8, yours: 15
Error in test 6: ft_strlcat("pqrstuvwxyz", "abcd", 5): expected: 9, yours: 16
Error in test 7: ft_strlcat("pqrstuvwxyz", "abcd", 6): expected: 10, yours: 17
Error in test 8: ft_strlcat("pqrstuvwxyz", "abcd", 7): expected: 11, yours: 18
Error in test 10: ft_strlcat("pqrs", "abcdefghi", 10): different memory




For /Users/mergarci/francinette/tests/libft/Tripouille/tests/ft_strlcpy_test.cpp:
KO  20:         /* 1 */ check(ft_strlcpy(dest, src, 0) == strlen(src) && dest[0] == 'A'); showLeaks();
KO  21:         /* 2 */ check(ft_strlcpy(dest, src, 1) == strlen(src) && dest[0] == 0 && dest[1] == 'A'); showLeaks();
KO  22:         /* 3 */ check(ft_strlcpy(dest, src, 2) == strlen(src) && dest[0] == 'c' && dest[1] == 0  && dest[2] == 'A'); showLeaks();
KO  24:         /* 5 */ check(ft_strlcpy(dest, src, 6) == strlen(src) && !memcmp(src, dest, 5) && dest[5] == 0); showLeaks(); memset(dest, 'A', 10);
KO  28:         /* 9 */ check(ft_strlcpy(dest, "1", 0) == 1 && dest[0] == 0); showLeaks(); memset(dest, 'A', 10);

For /Users/mergarci/francinette/tests/libft/Tripouille/tests/ft_strlcat_test.cpp:
KO  21:         /* 1 */ check(ft_strlcat(dest, src, 0) == strlen(src) && !strcmp(dest, "B")); showLeaks();
KO  23:         /* 2 */ check(ft_strlcat(dest, src, 1) == 10 && !strcmp(dest, "B")); showLeaks();
KO  25:         /* 3 */ check(ft_strlcat(dest, src, 3) == 3 + strlen(src) && !strcmp(dest, "BBBB")); showLeaks();
KO  26:         /* 4 */ check(ft_strlcat(dest, src, 6) == 13 && !strcmp(dest, "BBBBA")); showLeaks();
KO  28:         /* 5 */ check(ft_strlcat(dest, src, -1) == 14 && !strcmp(dest, "CCCCCAAAAAAAAA")); showLeaks();
KO  30:         /* 6 */ check(ft_strlcat(dest, src, 17) == 24 && !strcmp(dest, "CCCCCCCCCCCCCCCA")); showLeaks();
KO  32:         /* 7 */ check(ft_strlcat(dest, src, 1) == strlen(src) && !strcmp(dest, "")); showLeaks();
KO  44:         /* 13 */ check(ft_strlcat(dest, "123", 1) == 3 && !strcmp(dest, "")); showLeaks();
KO  46:         /* 14 */ check(ft_strlcat(dest, "123", 2) == 3 && !strcmp(dest, "1")); showLeaks();
KO  48:         /* 15 */ check(ft_strlcat(dest, "123", 3) == 3 && !strcmp(dest, "12")); showLeaks();
KO  52:         /* 17 */ check(ft_strlcat(dest, "123", 0) == 3 && !strcmp(dest, "")); showLeaks();



medio funciona!!!!
size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)
{
	size_t	len_dest;
	size_t	len_src;
	size_t	i;

	len_src = ft_strlen(src);
	len_dest = ft_strlen(dst);
	i = 0;
	printf("dstsize: %zu, len_src: %zu, len_dst: %zu... RESTA: %d\n", dstsize, len_src, len_dest, (int)(dstsize - len_dest - 1));
	if ((int)(dstsize - len_dest - 1) > 0)
	{
		i = len_dest;
		while (*src && i < (dstsize - 1))
		{
			dst[len_dest++] = *src++;
			i++;
		}
		//len_dest = i;
		dst[len_dest] = '\0';
	}
	else if (len_dest > len_src)
		len_dest = len_src;
	
	//else if (len_dest < len_src)
	//	len_dest = len_dest + dstsize;
	return (len_dest + dstsize - 1);
}